/* eslint-disable no-shadow */
import {join, resolve, sep} from 'path';
const {promises: {readFile}} = require('fs');

import {complement, isMdExtension, isHidden, allPass, compose, prop, getDirs, getFiles} from './common';

import {YfmToc, IncluderFnParams, IncluderFnOutput, IncluderFnOutputElement} from '../../../models';

const isMdVisible = allPass([isMdExtension, complement(isHidden)]);

async function generateContent(params: IncluderFnParams): IncluderFnOutput {
    const {
        include: {path},
        root,
    } = params;

    return generateContentRec(join(root, path));
}

async function generateContentRec(depth: string): IncluderFnOutput {
    const containsWatermark = (str: string) =>
        /^This file was generated by \[SourceDocs\]/gmu.test(str);

    const processContent = (content: string) =>
        content.split('\n').filter(complement(containsWatermark)).join('\n');

    // @ts-ignore eslint-disable-next-line @typescript-eslint/no-explicit-any
    const filter = (files: {name: string}[]) => files.filter(compose(isMdVisible, prop('name')));

    const read = async (names: {name: string}[]) => {
        const handler = async ({name}: {name: string}) => ({
            path: join(depth, name),
            content: await readFile(resolve(join(depth, name)), {encoding: 'utf8'}),
        });

        return await Promise.all(names.map(handler));
    };

    const process = (data: {path: string; content: string}[]) =>
        data.map(({path, content}) => ({path, content: processContent(content)}));

    const [dirItems, fileItems] = await Promise.all([
        getDirs(resolve(depth)).then((dirs) => dirs.map(({name}: {name: string}) => name)),
        getFiles(resolve(depth)).then(filter).then(read).then(process),
    ]);

    const recurse: IncluderFnOutputElement[] = await Promise.all(
        dirItems.map((name: string) => generateContentRec(join(depth, name))),
    );

    return [...fileItems, ...recurse.flat(1)];
}

async function generateTocs(params: IncluderFnParams): IncluderFnOutput {
    const {
        include: {path},
        name,
        root,
    } = params;

    return generateTocsRec(join(root, path), name);
}

async function generateTocsRec(depth: string, name: string): IncluderFnOutput {
    const dirItem = ({name}: {name: string}) => ({
        name,
        include: {
            path: name + sep + 'toc.yaml',
            mode: 'link',
        },
    });
    const fileItem = ({name}: {name: string}) => ({
        name: name.replace(/.md$/gmu, ''),
        href: name,
    });

    const [dirItems, fileItems] = await Promise.all([
        getDirs(resolve(depth)).then((dirs) => dirs.map(dirItem)),
        getFiles(resolve(depth))
            .then((files) => files.filter(compose(isMdVisible, prop('name'))).map(fileItem)),
    ]);

    const toc = {
        name,
        href: 'index.yaml',
        items: [...dirItems, ...fileItems] as YfmToc[],
    };

    const recurse: IncluderFnOutputElement[] = await Promise.all(
        dirItems.map(({name}: {name: string}) => generateTocsRec(join(depth, name), name)),
    );

    return [{content: toc, path: join(depth, 'toc.yaml')}, ...recurse.flat(1)];
}

async function generateLeadingPages(
    params: IncluderFnParams,
): IncluderFnOutput {
    const {
        include: {path},
        name,
        root,
    } = params;

    return generateLeadingPagesRec(join(root, path), name);
}

async function generateLeadingPagesRec(
    depth: string,
    name: string,
): IncluderFnOutput {
    const dirLink = ({name}: {name: string}) => ({
        title: name,
        href: name + sep,
    });
    const fileLink = ({name}: {name: string}) => ({
        title: name.replace(/.md$/gmu, ''),
        href: name,
    });

    const [dirLinks, fileLinks] = await Promise.all([
        getDirs(resolve(depth)).then((dirs) => dirs.map(dirLink)),
        getFiles(resolve(depth)).then((files) => files.filter(compose(isMdVisible, prop('name'))).map(fileLink)),
    ]);

    const index = {
        title: name,
        links: [...dirLinks, ...fileLinks],
    };

    const recurse: IncluderFnOutputElement[] = await Promise.all(
        dirLinks.map(({title}: {title: string}) => generateTocsRec(join(depth, title), title)),
    );

    return [{content: index, path: join(depth, 'index.yaml')}, ...recurse.flat(1)];
}

const name = 'sourcedocs';

export {name, generateTocs, generateLeadingPages, generateContent};
